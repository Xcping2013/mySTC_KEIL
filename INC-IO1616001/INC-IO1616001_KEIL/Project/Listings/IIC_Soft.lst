C51 COMPILER V9.56.0.0   IIC_SOFT                                                          04/29/2018 13:14:31 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE IIC_SOFT
OBJECT MODULE PLACED IN .\Objects\IIC_Soft.obj
COMPILER INVOKED BY: D:\hardware\Keil_v5\C51\BIN\C51.EXE ..\src\IIC_Soft.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\inc)
                    - DEBUG OBJECTEXTEND PRINT(.\Listings\IIC_Soft.lst) TABS(2) OBJECT(.\Objects\IIC_Soft.obj)

line level    source

   1          #include "IIC_SOFT.h"
   2          #include "delay.h"
   3          
   4          //产生IIC起始信号
   5          void IIC_Start(void)
   6          {
   7   1        //IIC_SDA_OUT();     //sda线输出
   8   1        IIC_SDA=1;        
   9   1        IIC_SCL=1;
  10   1        delay_us(4);
  11   1        IIC_SDA=0;//START:when CLK is high,DATA change form high to low 
  12   1        delay_us(4);
  13   1        IIC_SCL=0;//钳住I2C总线，准备发送或接收数据 
  14   1      }   
  15          //产生IIC停止信号
  16          void IIC_Stop(void)
  17          {
  18   1        //IIC_SDA_OUT();//sda线输出
  19   1        IIC_SCL=0;
  20   1        IIC_SDA=0;//STOP:when CLK is high DATA change form low to high
  21   1        delay_us(4);
  22   1        IIC_SCL=1; 
  23   1        IIC_SDA=1;//发送I2C总线结束信号
  24   1        delay_us(4);                  
  25   1      }
  26          //等待应答信号到来
  27          //返回值：1，接收应答失败
  28          //        0，接收应答成功
  29          u8 IIC_Wait_Ack(void)
  30          {
  31   1        u8 ucErrTime=0;
  32   1        //IIC_SDA_IN();      //SDA设置为输入  
  33   1        IIC_SDA=1;delay_us(1);     
  34   1        IIC_SCL=1;delay_us(1);   
  35   1        while(IIC_READ_SDA)
  36   1        {
  37   2          ucErrTime++;
  38   2          if(ucErrTime>250)
  39   2          {
  40   3            IIC_Stop();
  41   3            return 1;
  42   3          }
  43   2        }
  44   1        IIC_SCL=0;//时钟输出0      
  45   1        return 0;  
  46   1      } 
  47          //产生ACK应答
  48          void IIC_Ack(void)
  49          {
  50   1        IIC_SCL=0;
  51   1        //IIC_SDA_OUT();
  52   1        IIC_SDA=0;
  53   1        delay_us(2);
  54   1        IIC_SCL=1;
C51 COMPILER V9.56.0.0   IIC_SOFT                                                          04/29/2018 13:14:31 PAGE 2   

  55   1        delay_us(2);
  56   1        IIC_SCL=0;
  57   1      }
  58          //不产生ACK应答       
  59          void IIC_NAck(void)
  60          {
  61   1        IIC_SCL=0;
  62   1        //IIC_SDA_OUT();
  63   1        IIC_SDA=1;
  64   1        delay_us(2);
  65   1        IIC_SCL=1;
  66   1        delay_us(2);
  67   1        IIC_SCL=0;
  68   1      }                      
  69          //IIC发送一个字节
  70          //返回从机有无应答
  71          //1，有应答
  72          //0，无应答       
  73          void IIC_Send_Byte(u8 txd)
  74          {                        
  75   1          u8 t;   
  76   1          //IIC_SDA_OUT();      
  77   1          IIC_SCL=0;//拉低时钟开始数据传输
  78   1          for(t=0;t<8;t++)
  79   1          {              
  80   2              IIC_SDA=(txd&0x80)>>7;
  81   2              txd<<=1;    
  82   2          delay_us(2);  //对TEA5767这三个延时都是必须的
  83   2          IIC_SCL=1;
  84   2          delay_us(2);
  85   2          IIC_SCL=0;  
  86   2          delay_us(2);
  87   2          }  
  88   1          //delay_us(5);
  89   1      }       
  90          //读1个字节，ack=1时，发送ACK，ack=0，发送nACK   
  91          u8 IIC_Read_Byte(unsigned char ack)
  92          {
  93   1        unsigned char i,receive=0;
  94   1        IIC_SDA_IN();//SDA设置为输入
  95   1          for(i=0;i<8;i++ )
  96   1        {
  97   2              IIC_SCL=0; 
  98   2              delay_us(2);
  99   2              IIC_SCL=1;
 100   2          
 101   2              receive<<=1;
 102   2              if(IIC_READ_SDA)receive++;   
 103   2              delay_us(1); 
 104   2          }          
 105   1          if (!ack)
 106   1              IIC_NAck();//发送nACK
 107   1          else
 108   1              IIC_Ack(); //发送ACK   
 109   1          return receive;
 110   1      }
 111          
 112          
 113          //
 114          void IIC_DeviceReadBytes(u8 DeviceAddr, u16 ReadAddr, u8 *RegData, u8 len, u8 DeviceType )
 115          {                                          
 116   1        IIC_Start();  
C51 COMPILER V9.56.0.0   IIC_SOFT                                                          04/29/2018 13:14:31 PAGE 3   

 117   1        if(DeviceType==3)           //寄存器地址与器件地址复用，如AT24C02~AT24C64
 118   1        {
 119   2          IIC_Send_Byte(DeviceAddr & 0xFE +((ReadAddr/256)<<1));   //发送器件地址0XA0,写数据 
 120   2          IIC_Wait_Ack(); 
 121   2          IIC_Send_Byte(ReadAddr%256);         //发送低地址
 122   2          IIC_Wait_Ack(); 
 123   2        } 
 124   1        else if(DeviceType==2)    //两字节寄存器地址，         如AT24C125~AT24C512
 125   1        {
 126   2          IIC_Send_Byte(DeviceAddr & 0xFE);   //写器件地址    
 127   2          IIC_Wait_Ack();
 128   2          IIC_Send_Byte(ReadAddr>>8);        //发送高地址
 129   2          IIC_Wait_Ack();
 130   2          IIC_Send_Byte(ReadAddr%256);       //发送低地址
 131   2          IIC_Wait_Ack();                             
 132   2        } 
 133   1        else if(DeviceType==1)  //一字节寄存器地址            
 134   1        {
 135   2          IIC_Send_Byte(DeviceAddr & 0xFE);   //写器件地址    
 136   2          IIC_Wait_Ack();
 137   2          IIC_Send_Byte(ReadAddr%256);        //发送低地址
 138   2          IIC_Wait_Ack();                             
 139   2        } 
 140   1        
 141   1        IIC_Start();         
 142   1        IIC_Send_Byte(DeviceAddr | 0x01);    //进入接收模式        
 143   1        IIC_Wait_Ack(); 
 144   1        
 145   1      //  while(len--)
 146   1      //  {
 147   1      //    *(RegData++)=IIC_Read_Byte(1);  
 148   1      //  }
 149   1          while(len!=1)
 150   1        {
 151   2          len--;
 152   2          *(RegData++)=IIC_Read_Byte(1);  
 153   2        }
 154   1        *(RegData++)=IIC_Read_Byte(0);
 155   1        IIC_Stop();                        //产生一个停止条件     
 156   1      }
 157          //
 158          void IIC_DeviceWriteBytes(u8 DeviceAddr, u16 WriteAddr, u8  *RegData , u8 len, u8 DeviceType)
 159          { 
 160   1        IIC_Start();  
 161   1        if(DeviceType==3)
 162   1        {
 163   2          IIC_Send_Byte(DeviceAddr & 0xFE +((WriteAddr/256)<<1));   //发送器件地址0XA0,写数据 
 164   2          IIC_Wait_Ack(); 
 165   2          IIC_Send_Byte(WriteAddr%256);          //发送低地址
 166   2          IIC_Wait_Ack(); 
 167   2        } 
 168   1        else if(DeviceType==2)
 169   1        {
 170   2          IIC_Send_Byte(DeviceAddr & 0xFE);   //写器件地址    
 171   2          IIC_Wait_Ack();
 172   2          IIC_Send_Byte(WriteAddr>>8);        //发送高地址
 173   2          IIC_Wait_Ack();
 174   2          IIC_Send_Byte(WriteAddr%256);      //发送低地址
 175   2          IIC_Wait_Ack();                             
 176   2        } 
 177   1        else if(DeviceType==1)
 178   1        {
C51 COMPILER V9.56.0.0   IIC_SOFT                                                          04/29/2018 13:14:31 PAGE 4   

 179   2          IIC_Send_Byte(DeviceAddr & 0xFE);   //写器件地址    
 180   2          IIC_Wait_Ack();
 181   2          IIC_Send_Byte(WriteAddr%256);      //发送低地址
 182   2          IIC_Wait_Ack();                             
 183   2        } 
 184   1        
 185   1        while(len--)
 186   1        {
 187   2          IIC_Send_Byte(*(RegData++));      //发送字节                 
 188   2          IIC_Wait_Ack();
 189   2          //HAL_Delay(10);    
 190   2        }
 191   1        
 192   1        IIC_Stop();                         //产生一个停止条件 
 193   1        //HAL_Delay(10);
 194   1        delay_ms(10);
 195   1      }
 196          //
 197          
 198          
 199          
 200          
 201          
 202          
 203          
 204          
 205          
 206          
 207          
 208          
 209          
 210          
 211          
 212          
 213          
 214          
 215          
 216          
 217          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    583    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
