C51 COMPILER V9.56.0.0   COMMANDS                                                          04/25/2018 14:47:17 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE COMMANDS
OBJECT MODULE PLACED IN .\Objects\Commands.obj
COMPILER INVOKED BY: D:\hardware\Keil_v5\C51\BIN\C51.EXE ..\Src\Commands.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Inc;
                    -..\User) DEBUG OBJECTEXTEND PRINT(.\Listings\Commands.lst) TABS(2) OBJECT(.\Objects\Commands.obj)

line level    source

   1          #include  "main.h"
   2          #include  "commands.h"
   3          #include  "SysControl.h"
   4          #include  "IO.h"
   5          #include  "UART.h"
   6          #include  "EEPROM_OnChip.h"
   7          #include  "24cxx.h"
   8          #include  <string.h>
   9          #include  <stdlib.h>
  10          #include  <ctype.h>
  11          
  12          static void MakeLowercase( char *str);
  13          static void PrintCommandlist(void);
  14          static u8   Cmd_RomPage(char *Commands);
  15          
  16          //大写字母转小写
  17          static void MakeLowercase( char *str)   
  18          {
  19   1          while(*str!='\0')
  20   1          {
  21   2              if( ((*str)>='A')&&((*str)<='Z') )
  22   2              {
  23   3                  *str=*str+32;
  24   3              }
  25   2              str++;
  26   2          }
  27   1      }
  28          
  29          //通讯命令解析处理
  30          u8 ProcessCommand(char *Commands)       
  31          {
  32   1        MakeLowercase(Commands);
  33   1        if(PrintInputStatus(Commands)==1)             return 1;
  34   1        else if(SetOutputStatus(Commands)==1)         return 1;
  35   1        else if(ROM_WriteDatas(Commands)==1)          return 1;
  36   1        else if(ROM_ReadDatas(Commands)==1)           return 1;
  37   1        
  38   1        else if(strcmp("help",Commands)==0)       {   PrintCommandlist();               return 1;   }   
  39   1        else if(strcmp("reset",Commands)==0)      {   ResetMcuToMain();                 return 1;   }   
  40   1        //else if(strcmp("isp",Commands)==0)        {   ResetMpuIntoISP();                return 1;   }   
  41   1        else if(strcmp("sw",    Commands)==0)     {   PrintSoftVersionFromEEPROM();     return 1;   }
  42   1        else if(strcmp("hw",    Commands)==0)     {   PrintHardVersionFromEEPROM();     return 1;   }
  43   1        else if(strcmp("fsn",   Commands)==0)     {   PrintFSNFromEEPROM();             return 1;   }
  44   1        
  45   1        else if(strcmp("io test",   Commands)==0)     {   IoTestFlag=1;             return 1;   }
  46   1        else if(strcmp("start test",    Commands)==0)     {   BoardTestFlag=1;              return 1;   }
  47   1        else if(strcmp("stop test",   Commands)==0)     {   BoardTestFlag=0;              return 1;   }
  48   1      
  49   1        
  50   1        else if(strncmp("sw[",  Commands,3)==0) 
  51   1        {   
  52   2          char *p = NULL;
  53   2          char *s = &Commands[3];     
  54   2          u8 sw=(u8)strtol(s, &p, 10);  
C51 COMPILER V9.56.0.0   COMMANDS                                                          04/25/2018 14:47:17 PAGE 2   

  55   2          if(*p==']'&& *(p+1)=='\0')                  
  56   2          {   
  57   3            WriteSWToEEPROM(sw);                
  58   3            return 1;   
  59   3          }
  60   2          else return 0;  
  61   2        }
  62   1        else if(strncmp("hw[",  Commands,3)==0) 
  63   1        {   
  64   2          char *p = NULL;
  65   2          char *s = &Commands[3];     
  66   2          u8 hw=(u8 )strtol(s, &p, 10); 
  67   2          if(*p==']'&& *(p+1)=='\0')                  
  68   2          {   WriteHWToEEPROM(hw);                return 1;   }
  69   2          else return 0;  
  70   2        } 
  71   1        else if(strncmp("fsn[", Commands,4)==0) 
  72   1        { 
  73   2          u8 i;
  74   2          for(i=0;i<11;i++)
  75   2          {
  76   3            if(Commands[i+4]==']') {Commands[i+4]='\0'; break ;}
  77   3          }
  78   2          if( i>0 && i<11 && Commands[i+4]=='\0'&& Commands[i+5]=='\0')     
  79   2          {   WriteFSNToEEPROM((u8*)&Commands[4]);    return 1;   }
  80   2          else return 0;  
  81   2        } 
  82   1        else  if(Cmd_RomPage(Commands)==1)              return 1;   
  83   1        else if(strcmp("set 5v",    Commands)==0)     
  84   1        {   
  85   2          OUT_5V_1=0; OUT_5V_2=0; OUT_5V_3=0;
  86   2          UART_SendStr("SET 5V<OK>\n");return 1;
  87   2        }
  88   1        else if(strcmp("set 0v",    Commands)==0)     
  89   1        {   
  90   2          OUT_5V_1=1; OUT_5V_2=1; OUT_5V_3=1;
  91   2          UART_SendStr("SET 0V<OK>\n");return 1;
  92   2        }
  93   1        else
  94   1        {
  95   2          return 0;
  96   2        }
  97   1      }
  98          //帮助提示
  99          static void PrintCommandlist(void)
 100          {
 101   1        UART_SendStr("Send--------Receive----------meaning\n"); 
 102   1        UART_SendStr("sw----------SW<1.00>---------Get software version\n");
 103   1        UART_SendStr("hw----------HW<2.00>---------Get hardware version\n");
 104   1        UART_SendStr("fsn---------FSN<IN3-SMC>-----Get fixture serial number\n"); 
 105   1        UART_SendStr("SW[]--------SW[110]<OK>------Set software version\n");
 106   1        UART_SendStr("HW[]--------HW[200]<OK>------Set hardware version\n");
 107   1        UART_SendStr("FSN[]-------FSN[SSS-1]<OK>---Set fixture serial number\n");
 108   1      //  UART_SendStr("reset------------------------reset fixture\n");
 109   1      //  UART_SendStr("isp--------------------------reset ISP\n");
 110   1        UART_SendStr("ROM[]------------------------Read Datas\n");
 111   1        UART_SendStr("ROM[][]----------------------Write Datas\n");
 112   1        UART_SendStr("SAVE INFO XX YYYYY\n");
 113   1        UART_SendStr("READ INFO XX\n");
 114   1      
 115   1        UART_SendStr("*************************************************\n");
 116   1        UART_SendStr("INT[]------INT[1]<0>---------Get the input status\n");
C51 COMPILER V9.56.0.0   COMMANDS                                                          04/25/2018 14:47:17 PAGE 3   

 117   1        UART_SendStr("OUT[][]----OUT[1][1]<OK>-----Set the output status\n");
 118   1        UART_SendStr("SET 5V-----SET 5V<OK>-----Set the port to 5v\n");
 119   1        UART_SendStr("SET 0V-----SET 0V<OK>-----Set the port to 0v\n");
 120   1      
 121   1        UART_SendStr("Please send command as above end with \\r\\n\n");
 122   1      }
 123          //
 124          static u8  Cmd_RomPage(char *Commands)
 125          {
 126   1        if( strncmp(Commands,"save info ",10)==0  ) 
 127   1        { 
 128   2          char *p = NULL;
 129   2          char *s = &Commands[10];  
 130   2          u16 PageNum=0;  
 131   2          PageNum=strtol(s, &p, 10);  
 132   2          P15=1;P16=1;
 133   2          if( *p==' ' && PageNum>0 && PageNum <(256-10) )     //前10页用于FSN+ROM 
 134   2          {
 135   3            IIC_DeviceWriteBytes(0xA0,64*(10+PageNum),(u8 *)p+1,64,2);
 136   3            UART_Printf("save info %d OK\n",PageNum); 
 137   3            return 1;
 138   3          } 
 139   2          UART_Printf("<NA>\n");return 1;
 140   2        }
 141   1        if( strncmp(Commands,"read info ",10)==0  ) 
 142   1        { 
 143   2          char *p = NULL;
 144   2          char *s = &Commands[10];  
 145   2          u16 PageNum=0;  
 146   2          u8 DataRead[64]={'\0'};
 147   2          PageNum=strtol(s, &p, 10);  
 148   2          P15=1;P16=1;
 149   2          if( *p=='\0' && PageNum>0 && PageNum <(256-10)  )     //前10页用于FSN+ROM 
 150   2          {
 151   3            IIC_DeviceReadBytes(0xA0,64*(10+PageNum), DataRead,64,2);
 152   3            UART_Printf("read info %d %.64s\n",PageNum,DataRead);
 153   3            return 1;
 154   3          } 
 155   2          UART_Printf("<NA>\n");return 1;
 156   2        }
 157   1        else return 0;
 158   1      }
 159          //
 160          
 161          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1629    ----
   CONSTANT SIZE    =    991    ----
   XDATA SIZE       =   ----      85
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
